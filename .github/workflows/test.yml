name: test

on:
  push:
    branches: [ m1-release-updates-test ]

jobs:
# ================================
#             Publish
# ================================
  create-github-release:
    name: Publish GitHub draft release
    runs-on: ubuntu-latest
    steps:      
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Indicate full history so Nerdbank.GitVersioning works.
          ref: m1-release-updates-test

      - name: Set up dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.201
      
      # Install Nerdbank.GitVersioning
      - uses: dotnet/nbgv@master
        with:
          setCommonVars: true

      - name: Archive macOS payload and symbols
        run: |
          mkdir osx-payload-and-symbols
          mkdir osx-zip

          touch osx-payload-and-symbols/hi.txt
          touch osx-payload-and-symbols/bye.txt

          tar -C osx-payload-and-symbols -czf osx-zip/sample.tar.gz .

      - uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const version = process.env.GitBuildVersionSimple

            var releaseMetadata = {
              owner: context.repo.owner,
              repo: context.repo.repo
            };

            // Create the release
            var tagName = `v${version}`;
            var createdRelease = await github.rest.repos.createRelease({
              ...releaseMetadata,
              draft: true,
              tag_name: tagName,
              name: `GCM ${version}`
            });
            releaseMetadata.release_id = createdRelease.data.id;

            // Uploads contents of directory to the release created above
            async function uploadDirectoryToRelease(directory, includeExtensions=[]) {
              return fs.promises.readdir(directory)
                .then(async(files) => Promise.all(
                  files.filter(file => {
                    return includeExtensions.length==0 || includeExtensions.includes(path.extname(file).toLowerCase());
                  })
                  .map(async (file) => {
                    var filePath = path.join(directory, file);
                    github.rest.repos.uploadReleaseAsset({
                      ...releaseMetadata,
                      name: file,
                      headers: {
                        "content-length": (await fs.promises.stat(filePath)).size
                      },
                      data: fs.createReadStream(filePath)
                    });
                  }))
                );
            }

            await Promise.all([
              uploadDirectoryToRelease('osx-zip'),
            ]);